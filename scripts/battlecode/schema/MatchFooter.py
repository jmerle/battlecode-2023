# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Sent to end a match.
class MatchFooter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MatchFooter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMatchFooter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MatchFooter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The ID of the winning team.
    # MatchFooter
    def Winner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The number of rounds played.
    # MatchFooter
    def TotalRounds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Profiler data for team A and B if profiling is enabled.
    # MatchFooter
    def ProfilerFiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from battlecode.schema.ProfilerFile import ProfilerFile
            obj = ProfilerFile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MatchFooter
    def ProfilerFilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MatchFooter
    def ProfilerFilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def MatchFooterStart(builder): builder.StartObject(3)
def Start(builder):
    return MatchFooterStart(builder)
def MatchFooterAddWinner(builder, winner): builder.PrependInt8Slot(0, winner, 0)
def AddWinner(builder, winner):
    return MatchFooterAddWinner(builder, winner)
def MatchFooterAddTotalRounds(builder, totalRounds): builder.PrependInt32Slot(1, totalRounds, 0)
def AddTotalRounds(builder, totalRounds):
    return MatchFooterAddTotalRounds(builder, totalRounds)
def MatchFooterAddProfilerFiles(builder, profilerFiles): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(profilerFiles), 0)
def AddProfilerFiles(builder, profilerFiles):
    return MatchFooterAddProfilerFiles(builder, profilerFiles)
def MatchFooterStartProfilerFilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartProfilerFilesVector(builder, numElems):
    return MatchFooterStartProfilerFilesVector(builder, numElems)
def MatchFooterEnd(builder): return builder.EndObject()
def End(builder):
    return MatchFooterEnd(builder)