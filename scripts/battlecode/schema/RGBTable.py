# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A table of RGB values.
class RGBTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RGBTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRGBTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RGBTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RGBTable
    def Red(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RGBTable
    def RedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RGBTable
    def RedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RGBTable
    def RedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # RGBTable
    def Green(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RGBTable
    def GreenAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RGBTable
    def GreenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RGBTable
    def GreenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RGBTable
    def Blue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RGBTable
    def BlueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RGBTable
    def BlueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RGBTable
    def BlueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def RGBTableStart(builder): builder.StartObject(3)
def Start(builder):
    return RGBTableStart(builder)
def RGBTableAddRed(builder, red): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(red), 0)
def AddRed(builder, red):
    return RGBTableAddRed(builder, red)
def RGBTableStartRedVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRedVector(builder, numElems):
    return RGBTableStartRedVector(builder, numElems)
def RGBTableAddGreen(builder, green): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(green), 0)
def AddGreen(builder, green):
    return RGBTableAddGreen(builder, green)
def RGBTableStartGreenVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGreenVector(builder, numElems):
    return RGBTableStartGreenVector(builder, numElems)
def RGBTableAddBlue(builder, blue): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blue), 0)
def AddBlue(builder, blue):
    return RGBTableAddBlue(builder, blue)
def RGBTableStartBlueVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBlueVector(builder, numElems):
    return RGBTableStartBlueVector(builder, numElems)
def RGBTableEnd(builder): return builder.EndObject()
def End(builder):
    return RGBTableEnd(builder)