# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The map a round is played on.
class GameMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GameMap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGameMap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GameMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The name of a map.
    # GameMap
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The bottom corner of the map.
    # GameMap
    def MinCorner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from battlecode.schema.Vec import Vec
            obj = Vec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The top corner of the map.
    # GameMap
    def MaxCorner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from battlecode.schema.Vec import Vec
            obj = Vec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The map symmetry: 0 for rotation, 1 for horizontal, 2 for vertical.
    # GameMap
    def Symmetry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The bodies on the map.
    # GameMap
    def Bodies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from battlecode.schema.SpawnedBodyTable import SpawnedBodyTable
            obj = SpawnedBodyTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The random seed of the map.
    # GameMap
    def RandomSeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The walls on the map.
    # GameMap
    def Walls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GameMap
    def WallsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # GameMap
    def WallsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def WallsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # The clouds on the map.
    # GameMap
    def Clouds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GameMap
    def CloudsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # GameMap
    def CloudsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def CloudsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # The currents on the map.
    # GameMap
    def Currents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameMap
    def CurrentsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameMap
    def CurrentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def CurrentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # The island each square on the map belongs to.
    # GameMap
    def Islands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameMap
    def IslandsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameMap
    def IslandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def IslandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # The resource type each square is.
    # GameMap
    def Resources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GameMap
    def ResourcesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GameMap
    def ResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GameMap
    def ResourcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def GameMapStart(builder): builder.StartObject(11)
def Start(builder):
    return GameMapStart(builder)
def GameMapAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return GameMapAddName(builder, name)
def GameMapAddMinCorner(builder, minCorner): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(minCorner), 0)
def AddMinCorner(builder, minCorner):
    return GameMapAddMinCorner(builder, minCorner)
def GameMapAddMaxCorner(builder, maxCorner): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(maxCorner), 0)
def AddMaxCorner(builder, maxCorner):
    return GameMapAddMaxCorner(builder, maxCorner)
def GameMapAddSymmetry(builder, symmetry): builder.PrependInt32Slot(3, symmetry, 0)
def AddSymmetry(builder, symmetry):
    return GameMapAddSymmetry(builder, symmetry)
def GameMapAddBodies(builder, bodies): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bodies), 0)
def AddBodies(builder, bodies):
    return GameMapAddBodies(builder, bodies)
def GameMapAddRandomSeed(builder, randomSeed): builder.PrependInt32Slot(5, randomSeed, 0)
def AddRandomSeed(builder, randomSeed):
    return GameMapAddRandomSeed(builder, randomSeed)
def GameMapAddWalls(builder, walls): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(walls), 0)
def AddWalls(builder, walls):
    return GameMapAddWalls(builder, walls)
def GameMapStartWallsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartWallsVector(builder, numElems):
    return GameMapStartWallsVector(builder, numElems)
def GameMapAddClouds(builder, clouds): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(clouds), 0)
def AddClouds(builder, clouds):
    return GameMapAddClouds(builder, clouds)
def GameMapStartCloudsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartCloudsVector(builder, numElems):
    return GameMapStartCloudsVector(builder, numElems)
def GameMapAddCurrents(builder, currents): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(currents), 0)
def AddCurrents(builder, currents):
    return GameMapAddCurrents(builder, currents)
def GameMapStartCurrentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCurrentsVector(builder, numElems):
    return GameMapStartCurrentsVector(builder, numElems)
def GameMapAddIslands(builder, islands): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(islands), 0)
def AddIslands(builder, islands):
    return GameMapAddIslands(builder, islands)
def GameMapStartIslandsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartIslandsVector(builder, numElems):
    return GameMapStartIslandsVector(builder, numElems)
def GameMapAddResources(builder, resources): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(resources), 0)
def AddResources(builder, resources):
    return GameMapAddResources(builder, resources)
def GameMapStartResourcesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartResourcesVector(builder, numElems):
    return GameMapStartResourcesVector(builder, numElems)
def GameMapEnd(builder): return builder.EndObject()
def End(builder):
    return GameMapEnd(builder)