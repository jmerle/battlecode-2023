# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Metadata about all bodies of a particular type.
class BodyTypeMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BodyTypeMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBodyTypeMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BodyTypeMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BodyTypeMetadata
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def BuildCostAd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def BuildCostMn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def BuildCostEx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def ActionCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def MovementCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def Health(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def ActionRadiusSquared(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def VisionRadiusSquared(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BodyTypeMetadata
    def BytecodeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BodyTypeMetadataStart(builder): builder.StartObject(10)
def Start(builder):
    return BodyTypeMetadataStart(builder)
def BodyTypeMetadataAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def AddType(builder, type):
    return BodyTypeMetadataAddType(builder, type)
def BodyTypeMetadataAddBuildCostAd(builder, buildCostAd): builder.PrependInt32Slot(1, buildCostAd, 0)
def AddBuildCostAd(builder, buildCostAd):
    return BodyTypeMetadataAddBuildCostAd(builder, buildCostAd)
def BodyTypeMetadataAddBuildCostMn(builder, buildCostMn): builder.PrependInt32Slot(2, buildCostMn, 0)
def AddBuildCostMn(builder, buildCostMn):
    return BodyTypeMetadataAddBuildCostMn(builder, buildCostMn)
def BodyTypeMetadataAddBuildCostEx(builder, buildCostEx): builder.PrependInt32Slot(3, buildCostEx, 0)
def AddBuildCostEx(builder, buildCostEx):
    return BodyTypeMetadataAddBuildCostEx(builder, buildCostEx)
def BodyTypeMetadataAddActionCooldown(builder, actionCooldown): builder.PrependInt32Slot(4, actionCooldown, 0)
def AddActionCooldown(builder, actionCooldown):
    return BodyTypeMetadataAddActionCooldown(builder, actionCooldown)
def BodyTypeMetadataAddMovementCooldown(builder, movementCooldown): builder.PrependInt32Slot(5, movementCooldown, 0)
def AddMovementCooldown(builder, movementCooldown):
    return BodyTypeMetadataAddMovementCooldown(builder, movementCooldown)
def BodyTypeMetadataAddHealth(builder, health): builder.PrependInt32Slot(6, health, 0)
def AddHealth(builder, health):
    return BodyTypeMetadataAddHealth(builder, health)
def BodyTypeMetadataAddActionRadiusSquared(builder, actionRadiusSquared): builder.PrependInt32Slot(7, actionRadiusSquared, 0)
def AddActionRadiusSquared(builder, actionRadiusSquared):
    return BodyTypeMetadataAddActionRadiusSquared(builder, actionRadiusSquared)
def BodyTypeMetadataAddVisionRadiusSquared(builder, visionRadiusSquared): builder.PrependInt32Slot(8, visionRadiusSquared, 0)
def AddVisionRadiusSquared(builder, visionRadiusSquared):
    return BodyTypeMetadataAddVisionRadiusSquared(builder, visionRadiusSquared)
def BodyTypeMetadataAddBytecodeLimit(builder, bytecodeLimit): builder.PrependInt32Slot(9, bytecodeLimit, 0)
def AddBytecodeLimit(builder, bytecodeLimit):
    return BodyTypeMetadataAddBytecodeLimit(builder, bytecodeLimit)
def BodyTypeMetadataEnd(builder): return builder.EndObject()
def End(builder):
    return BodyTypeMetadataEnd(builder)